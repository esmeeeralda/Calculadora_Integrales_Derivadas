/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Principal;

import java.awt.Dimension;
import java.awt.Font;
import java.awt.Toolkit;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Random;
import java.util.Vector;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JTextPane;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.MutableAttributeSet;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;

public class GUI extends javax.swing.JFrame {

    boolean integrar;  // Variable que indica si se está integrando
    String dato = ""; // Variable para almacenar un dato
    int cont; // Contador
    public static ArrayList[] Historial;// Arreglo de ArrayList para almacenar el historial
    DefaultTableModel ModeloHistorial = new DefaultTableModel();// Modelo de la tabla para el historial 
// Constructor de la clase GUI
    /**
     * Creates new form GUI
     */
    
    public GUI() {
        initComponents(); // Inicializa componentes gráficos
        estado(false); // Configura el estado inicial
        Historial = new ArrayList[10]; // Inicializa el historial con un tamaño de 10
        cont = 9; // Inicializa el contador
        
        // Añade columnas al modelo de la tabla de historial
        ModeloHistorial.addColumn("Función");
        ModeloHistorial.addColumn("Resultado");
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jdalHistorial = new javax.swing.JDialog();
        jbtnMostrar = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jlitHistorial = new javax.swing.JTable();
        jbtnImprimir = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtxpProcedimiento = new javax.swing.JTextPane();
        jbtnHistorial = new javax.swing.JButton();
        jbtnComentario = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtxpFuncion = new javax.swing.JTextPane();
        jPanel1 = new javax.swing.JPanel();
        jbtnIntegrando = new javax.swing.JButton();
        jbtnCuadrado = new javax.swing.JButton();
        jbtnCubo = new javax.swing.JButton();
        jbtnPotencia = new javax.swing.JButton();
        jbtnExponencial = new javax.swing.JButton();
        jbtnParentecisA = new javax.swing.JButton();
        jbtnParentecisC = new javax.swing.JButton();
        jbtnCosiente = new javax.swing.JButton();
        jbtnProducto = new javax.swing.JButton();
        jbtnDerivada = new javax.swing.JButton();
        jbtnSeno = new javax.swing.JButton();
        jbtnCoseno = new javax.swing.JButton();
        jbtnTangente = new javax.swing.JButton();
        jbtnCotangente = new javax.swing.JButton();
        jbtnSecante = new javax.swing.JButton();
        jbtnCosecante = new javax.swing.JButton();
        jbtnLogaritmoNatural = new javax.swing.JButton();
        jbtnValorAbsoluto = new javax.swing.JButton();
        jbtnIgual = new javax.swing.JButton();
        jbtnNuevo = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtxpResultado = new javax.swing.JTextPane();

        jdalHistorial.setTitle("Historial de Resultados");

        jbtnMostrar.setText("Mostrar");
        jbtnMostrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnMostrarActionPerformed(evt);
            }
        });

        jlitHistorial.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(jlitHistorial);

        javax.swing.GroupLayout jdalHistorialLayout = new javax.swing.GroupLayout(jdalHistorial.getContentPane());
        jdalHistorial.getContentPane().setLayout(jdalHistorialLayout);
        jdalHistorialLayout.setHorizontalGroup(
            jdalHistorialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jdalHistorialLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jdalHistorialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 533, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jdalHistorialLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jbtnMostrar)))
                .addContainerGap())
        );
        jdalHistorialLayout.setVerticalGroup(
            jdalHistorialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jdalHistorialLayout.createSequentialGroup()
                .addContainerGap(14, Short.MAX_VALUE)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jbtnMostrar)
                .addContainerGap())
        );

        jbtnImprimir.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jbtnImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/impresora.png"))); // NOI18N
        jbtnImprimir.setToolTipText("Imprimir");
        jbtnImprimir.setDoubleBuffered(true);
        jbtnImprimir.setEnabled(false);
        jbtnImprimir.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbtnImprimir.setMaximumSize(new java.awt.Dimension(25, 25));
        jbtnImprimir.setMinimumSize(new java.awt.Dimension(25, 25));
        jbtnImprimir.setPreferredSize(new java.awt.Dimension(25, 25));
        jbtnImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnImprimirActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Procedimiento", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 12))); // NOI18N
        jPanel3.setOpaque(false);

        jScrollPane2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jtxpProcedimiento.setEditable(false);
        jtxpProcedimiento.setBackground(new java.awt.Color(0, 204, 153));
        jScrollPane2.setViewportView(jtxpProcedimiento);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 67, Short.MAX_VALUE))
        );

        jbtnHistorial.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jbtnHistorial.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/historial.png"))); // NOI18N
        jbtnHistorial.setToolTipText("Historial");
        jbtnHistorial.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbtnHistorial.setMaximumSize(new java.awt.Dimension(25, 25));
        jbtnHistorial.setMinimumSize(new java.awt.Dimension(25, 25));
        jbtnHistorial.setPreferredSize(new java.awt.Dimension(25, 25));
        jbtnHistorial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnHistorialActionPerformed(evt);
            }
        });

        jbtnComentario.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jbtnComentario.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/Descripción.png"))); // NOI18N
        jbtnComentario.setToolTipText("Descripción del Resultado");
        jbtnComentario.setEnabled(false);
        jbtnComentario.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbtnComentario.setMaximumSize(new java.awt.Dimension(25, 25));
        jbtnComentario.setMinimumSize(new java.awt.Dimension(25, 25));
        jbtnComentario.setPreferredSize(new java.awt.Dimension(25, 25));
        jbtnComentario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnComentarioActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CDI");
        setBackground(new java.awt.Color(102, 255, 204));
        setResizable(false);

        jPanel4.setBackground(new java.awt.Color(102, 0, 102));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Función:", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 12))); // NOI18N

        jScrollPane3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane3.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jtxpFuncion.setBackground(new java.awt.Color(0, 204, 153));
        jtxpFuncion.setBorder(null);
        jtxpFuncion.setFont(new java.awt.Font("Times New Roman", 2, 18)); // NOI18N
        jtxpFuncion.setEnabled(false);
        jtxpFuncion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtxpFuncionKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtxpFuncionKeyReleased(evt);
            }
        });
        jScrollPane3.setViewportView(jtxpFuncion);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Operadores:", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 12))); // NOI18N
        jPanel1.setOpaque(false);

        jbtnIntegrando.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jbtnIntegrando.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/integrando.png"))); // NOI18N
        jbtnIntegrando.setToolTipText("Integrando");
        jbtnIntegrando.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbtnIntegrando.setMaximumSize(new java.awt.Dimension(25, 25));
        jbtnIntegrando.setMinimumSize(new java.awt.Dimension(25, 25));
        jbtnIntegrando.setPreferredSize(new java.awt.Dimension(25, 25));
        jbtnIntegrando.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnIntegrandoActionPerformed(evt);
            }
        });

        jbtnCuadrado.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jbtnCuadrado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/Cuadrado.png"))); // NOI18N
        jbtnCuadrado.setToolTipText("Potencia Cuadrado");
        jbtnCuadrado.setEnabled(false);
        jbtnCuadrado.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbtnCuadrado.setMaximumSize(new java.awt.Dimension(25, 25));
        jbtnCuadrado.setMinimumSize(new java.awt.Dimension(25, 25));
        jbtnCuadrado.setPreferredSize(new java.awt.Dimension(25, 25));
        jbtnCuadrado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnCuadradoActionPerformed(evt);
            }
        });

        jbtnCubo.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jbtnCubo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/cubo.png"))); // NOI18N
        jbtnCubo.setToolTipText("Potencia Cubo");
        jbtnCubo.setEnabled(false);
        jbtnCubo.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbtnCubo.setMaximumSize(new java.awt.Dimension(25, 25));
        jbtnCubo.setMinimumSize(new java.awt.Dimension(25, 25));
        jbtnCubo.setPreferredSize(new java.awt.Dimension(25, 25));
        jbtnCubo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnCuboActionPerformed(evt);
            }
        });

        jbtnPotencia.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jbtnPotencia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/potencia.png"))); // NOI18N
        jbtnPotencia.setToolTipText("Potencia n");
        jbtnPotencia.setEnabled(false);
        jbtnPotencia.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbtnPotencia.setMaximumSize(new java.awt.Dimension(25, 25));
        jbtnPotencia.setMinimumSize(new java.awt.Dimension(25, 25));
        jbtnPotencia.setPreferredSize(new java.awt.Dimension(25, 25));
        jbtnPotencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnPotenciaActionPerformed(evt);
            }
        });

        jbtnExponencial.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jbtnExponencial.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/exponencial.png"))); // NOI18N
        jbtnExponencial.setToolTipText("Función Exponencial");
        jbtnExponencial.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbtnExponencial.setMaximumSize(new java.awt.Dimension(25, 25));
        jbtnExponencial.setMinimumSize(new java.awt.Dimension(25, 25));
        jbtnExponencial.setPreferredSize(new java.awt.Dimension(25, 25));
        jbtnExponencial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnExponencialActionPerformed(evt);
            }
        });

        jbtnParentecisA.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jbtnParentecisA.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/ParentecisA.png"))); // NOI18N
        jbtnParentecisA.setToolTipText("Paréntecia Abierto");
        jbtnParentecisA.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbtnParentecisA.setMaximumSize(new java.awt.Dimension(25, 25));
        jbtnParentecisA.setMinimumSize(new java.awt.Dimension(25, 25));
        jbtnParentecisA.setPreferredSize(new java.awt.Dimension(25, 25));
        jbtnParentecisA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnParentecisAActionPerformed(evt);
            }
        });

        jbtnParentecisC.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jbtnParentecisC.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/ParentecisC.png"))); // NOI18N
        jbtnParentecisC.setToolTipText("Paréntecia Cerrado");
        jbtnParentecisC.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbtnParentecisC.setMaximumSize(new java.awt.Dimension(25, 25));
        jbtnParentecisC.setMinimumSize(new java.awt.Dimension(25, 25));
        jbtnParentecisC.setPreferredSize(new java.awt.Dimension(25, 25));
        jbtnParentecisC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnParentecisCActionPerformed(evt);
            }
        });

        jbtnCosiente.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jbtnCosiente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/Cosiente.png"))); // NOI18N
        jbtnCosiente.setToolTipText("Cosiente");
        jbtnCosiente.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbtnCosiente.setMaximumSize(new java.awt.Dimension(25, 25));
        jbtnCosiente.setMinimumSize(new java.awt.Dimension(25, 25));
        jbtnCosiente.setPreferredSize(new java.awt.Dimension(25, 25));
        jbtnCosiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnCosienteActionPerformed(evt);
            }
        });

        jbtnProducto.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jbtnProducto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/producto.png"))); // NOI18N
        jbtnProducto.setToolTipText("Producto");
        jbtnProducto.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbtnProducto.setMaximumSize(new java.awt.Dimension(25, 25));
        jbtnProducto.setMinimumSize(new java.awt.Dimension(25, 25));
        jbtnProducto.setPreferredSize(new java.awt.Dimension(25, 25));
        jbtnProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnProductoActionPerformed(evt);
            }
        });

        jbtnDerivada.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jbtnDerivada.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/Derivacion.png"))); // NOI18N
        jbtnDerivada.setToolTipText("Derivada");
        jbtnDerivada.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbtnDerivada.setMaximumSize(new java.awt.Dimension(25, 25));
        jbtnDerivada.setMinimumSize(new java.awt.Dimension(25, 25));
        jbtnDerivada.setPreferredSize(new java.awt.Dimension(25, 25));
        jbtnDerivada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnDerivadaActionPerformed(evt);
            }
        });

        jbtnSeno.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jbtnSeno.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/Seno.png"))); // NOI18N
        jbtnSeno.setToolTipText("Seno");
        jbtnSeno.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbtnSeno.setMaximumSize(new java.awt.Dimension(25, 25));
        jbtnSeno.setMinimumSize(new java.awt.Dimension(25, 25));
        jbtnSeno.setPreferredSize(new java.awt.Dimension(25, 25));
        jbtnSeno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnSenoActionPerformed(evt);
            }
        });

        jbtnCoseno.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jbtnCoseno.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/Coseno.png"))); // NOI18N
        jbtnCoseno.setToolTipText("Coseno");
        jbtnCoseno.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbtnCoseno.setMaximumSize(new java.awt.Dimension(25, 25));
        jbtnCoseno.setMinimumSize(new java.awt.Dimension(25, 25));
        jbtnCoseno.setPreferredSize(new java.awt.Dimension(25, 25));
        jbtnCoseno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnCosenoActionPerformed(evt);
            }
        });

        jbtnTangente.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jbtnTangente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/Tangente.png"))); // NOI18N
        jbtnTangente.setToolTipText("Tangente");
        jbtnTangente.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbtnTangente.setMaximumSize(new java.awt.Dimension(25, 25));
        jbtnTangente.setMinimumSize(new java.awt.Dimension(25, 25));
        jbtnTangente.setPreferredSize(new java.awt.Dimension(25, 25));
        jbtnTangente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnTangenteActionPerformed(evt);
            }
        });

        jbtnCotangente.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jbtnCotangente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/Cotangente.png"))); // NOI18N
        jbtnCotangente.setToolTipText("Cotangente");
        jbtnCotangente.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbtnCotangente.setMaximumSize(new java.awt.Dimension(25, 25));
        jbtnCotangente.setMinimumSize(new java.awt.Dimension(25, 25));
        jbtnCotangente.setPreferredSize(new java.awt.Dimension(25, 25));
        jbtnCotangente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnCotangenteActionPerformed(evt);
            }
        });

        jbtnSecante.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jbtnSecante.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/Secante.png"))); // NOI18N
        jbtnSecante.setToolTipText("Secante");
        jbtnSecante.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbtnSecante.setMaximumSize(new java.awt.Dimension(25, 25));
        jbtnSecante.setMinimumSize(new java.awt.Dimension(25, 25));
        jbtnSecante.setPreferredSize(new java.awt.Dimension(25, 25));
        jbtnSecante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnSecanteActionPerformed(evt);
            }
        });

        jbtnCosecante.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jbtnCosecante.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/Cosecante.png"))); // NOI18N
        jbtnCosecante.setToolTipText("Cosecante");
        jbtnCosecante.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbtnCosecante.setMaximumSize(new java.awt.Dimension(25, 25));
        jbtnCosecante.setMinimumSize(new java.awt.Dimension(25, 25));
        jbtnCosecante.setPreferredSize(new java.awt.Dimension(25, 25));
        jbtnCosecante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnCosecanteActionPerformed(evt);
            }
        });

        jbtnLogaritmoNatural.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jbtnLogaritmoNatural.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/Logaritmo_Natural.png"))); // NOI18N
        jbtnLogaritmoNatural.setToolTipText("Logaritmo Natural.");
        jbtnLogaritmoNatural.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbtnLogaritmoNatural.setMaximumSize(new java.awt.Dimension(25, 25));
        jbtnLogaritmoNatural.setMinimumSize(new java.awt.Dimension(25, 25));
        jbtnLogaritmoNatural.setPreferredSize(new java.awt.Dimension(25, 25));
        jbtnLogaritmoNatural.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnLogaritmoNaturalActionPerformed(evt);
            }
        });

        jbtnValorAbsoluto.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jbtnValorAbsoluto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/Valor_Absoluto.png"))); // NOI18N
        jbtnValorAbsoluto.setToolTipText("Valor Absoluto");
        jbtnValorAbsoluto.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbtnValorAbsoluto.setMaximumSize(new java.awt.Dimension(25, 25));
        jbtnValorAbsoluto.setMinimumSize(new java.awt.Dimension(25, 25));
        jbtnValorAbsoluto.setPreferredSize(new java.awt.Dimension(25, 25));
        jbtnValorAbsoluto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnValorAbsolutoActionPerformed(evt);
            }
        });

        jbtnIgual.setBackground(new java.awt.Color(102, 255, 102));
        jbtnIgual.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jbtnIgual.setText("=");
        jbtnIgual.setToolTipText("Iguall");
        jbtnIgual.setAlignmentY(0.0F);
        jbtnIgual.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jbtnIgual.setMaximumSize(new java.awt.Dimension(25, 25));
        jbtnIgual.setMinimumSize(new java.awt.Dimension(25, 25));
        jbtnIgual.setPreferredSize(new java.awt.Dimension(25, 25));
        jbtnIgual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnIgualActionPerformed(evt);
            }
        });

        jbtnNuevo.setBackground(new java.awt.Color(255, 0, 0));
        jbtnNuevo.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jbtnNuevo.setText("N");
        jbtnNuevo.setToolTipText("Nuevo");
        jbtnNuevo.setAlignmentY(0.0F);
        jbtnNuevo.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jbtnNuevo.setMaximumSize(new java.awt.Dimension(25, 25));
        jbtnNuevo.setMinimumSize(new java.awt.Dimension(25, 25));
        jbtnNuevo.setPreferredSize(new java.awt.Dimension(25, 25));
        jbtnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnNuevoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jbtnProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtnDerivada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtnSeno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtnCoseno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtnTangente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtnCotangente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtnSecante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                        .addComponent(jbtnCosecante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jbtnIntegrando, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbtnCuadrado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbtnCubo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbtnPotencia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbtnExponencial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbtnParentecisA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbtnParentecisC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbtnCosiente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jbtnLogaritmoNatural, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbtnValorAbsoluto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jbtnIgual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(31, 31, 31)
                                .addComponent(jbtnNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(29, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbtnIntegrando, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtnCuadrado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtnCubo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtnPotencia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtnExponencial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtnParentecisA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtnParentecisC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtnCosiente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbtnProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtnDerivada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtnSeno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtnCoseno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtnTangente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtnCotangente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtnSecante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtnCosecante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbtnLogaritmoNatural, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtnValorAbsoluto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jbtnIgual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jbtnNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 12))); // NOI18N

        jScrollPane1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setToolTipText("");

        jtxpResultado.setEditable(false);
        jtxpResultado.setBackground(new java.awt.Color(0, 204, 153));
        jtxpResultado.setFont(new java.awt.Font("Times New Roman", 2, 18)); // NOI18N
        jScrollPane1.setViewportView(jtxpResultado);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 15, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(123, 123, 123))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(48, Short.MAX_VALUE))
        );

        jPanel1.getAccessibleContext().setAccessibleDescription("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 12, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jbtnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnNuevoActionPerformed
        Border borde = new TitledBorder(""); // Establece el borde del jPanel5 como un TitledBorder vacío
        this.jPanel5.setBorder(borde);
        
        // Deshabilita el JTextPane jtxpFuncion y lo limpia
        this.jtxpFuncion.setEnabled(false);
        this.jtxpFuncion.setText("");
        
        // Limpia los JTextPane jtxpResultado y jtxpProcedimiento
        this.jtxpResultado.setText("");
        this.jtxpProcedimiento.setText("");
        
        integrar = false; // Establece el valor de 'integrar' como false
        
        this.jtxpFuncion.grabFocus();
        estado(false); // Cambia el estado de los botones y componentes
        CDI.Comentario.clear(); // Limpia el ArrayList CDI.Comentario
        
        // Habilita los botones jbtnIntegrando y jbtnDerivada
        this.jbtnIntegrando.setEnabled(true);
        this.jbtnDerivada.setEnabled(true);
        
        // Deshabilita los botones jbtnImprimir y jbtnComentario
        this.jbtnImprimir.setEnabled(false);
        this.jbtnComentario.setEnabled(false);
    }//GEN-LAST:event_jbtnNuevoActionPerformed

    private void jbtnIgualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnIgualActionPerformed
        if (!"".equals(this.jtxpFuncion.getText())) { // Verifica si el campo de texto no está vacío
            this.jbtnImprimir.setEnabled(true);// Habilita un botón llamado "Imprimir"
            this.jbtnComentario.setEnabled(true); // Habilita un botón llamado "Comentario"
            String op, cad;
            int pos = 0;
            ArrayList resultados = new ArrayList(); // Crea un ArrayList llamado "resultados"
            if (!integrar) { // Verifica si la variable "integrar" es falsa
                op = "D"; // Asigna la cadena "D" a la variable "op"
            } else {
                op = "I"; // Si no, asigna la cadena "I" a la variable "op"
            }
            cad = this.jtxpFuncion.getText().substring(this.jtxpFuncion.getText().indexOf("(") + 1, this.jtxpFuncion.getText().lastIndexOf(")"));
            if (!"".equals(cad)) { // Verifica si la subcadena no está vacía
                CDI.CDIMaster(cad, op, dato); // Llama a un método CDIMaster con los argumentos "cad", "op", y "dato"
                resultados=Segmentador.Retorno; // Asigna un valor a la variable "resultados" desde la variable "Segmentador.Retorno"
            } else if (integrar) { // // Si es una operación de integración y "cad" está vacío
                CDI.CDIMaster("1", op, dato);  // Llama a CDIMaster con "1" como argumento
                resultados=Segmentador.Retorno; // Asigna el valor de Retorno de la clase Segmentador a la lista "resultados"
            } else {// Si no es una operación de integración y "cad" está vacío
                // Muestra un mensaje de error
                JOptionPane.showMessageDialog(this, "Para derivar debe colocar al menos un numero diferente de 0", "Error", JOptionPane.ERROR_MESSAGE);
                this.jtxpFuncion.grabFocus();
                if (!integrar) {
                    
                  
                    // Establece la posición del cursor
                    this.jtxpFuncion.setCaretPosition(7); 
                }
            }
            
            // Limpia el JTextPane jtxpProcedimiento
            this.jtxpProcedimiento.setText("");
            if (resultados != null) { // Verifica si hay resultados
                for (int i = 0; i < resultados.size(); i++) {
                    if (resultados.get(i).toString().equals("&&&")) { // Busca el marcador "&&&" en los resultados
                        pos = i; // Almacena la posición del marcador
                        break;
                    }
                }
                
                // Llena jtxpProcedimiento con los resultados anteriores al marcador "&&&"
                for (int i = 0; i < pos; i++) { 
                    this.jtxpProcedimiento.setText(this.jtxpProcedimiento.getText().concat(resultados.get(i).toString()));
                    changeLineSpacing(Float.valueOf("1"), false, this.jtxpProcedimiento);
                }
                pos++; // Incrementa la posición para avanzar más allá del marcador "&&&"
                for (int i = pos; i < resultados.size(); i++) {
                    // Llena jtxpResultado con los resultados posteriores al marcador "&&&"
                    this.jtxpResultado.setText(this.jtxpResultado.getText().concat(resultados.get(i).toString()));
                    changeLineSpacing(Float.valueOf("-0.5"), false, this.jtxpResultado);
                }
                resultados.clear(); // Limpia la lista de resultados
                GuardarHistorial(); // Guarda el historial
            } else {
                JOptionPane.showMessageDialog(this, "Debe Introducir una función válida para el sistema. /n Revise su función e intente de nuevo.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
             // Muestra un mensaje de error si no hay resultados
            JOptionPane.showMessageDialog(this, "Debe Introducir una función antes de dar clic a este botón. /n Intente de nuevo.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jbtnIgualActionPerformed

    private void jbtnValorAbsolutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnValorAbsolutoActionPerformed
        String sel = Select(false); // Obtiene una selección (sin paréntesis)
        this.jtxpFuncion.setText(sel.concat(arregloParentecis(false)).concat(Select2()));
        this.jtxpFuncion.grabFocus();
        this.jtxpFuncion.setCaretPosition(sel.length() + 1);        // TODO add your handling code here:
    }//GEN-LAST:event_jbtnValorAbsolutoActionPerformed

    private void jbtnLogaritmoNaturalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnLogaritmoNaturalActionPerformed
        String sel = Select(false);// Obtiene una selección (sin paréntesis)
        this.jtxpFuncion.setText(sel.concat("ln".concat(arregloParentecis(true)).concat(Select2())));
        this.jtxpFuncion.grabFocus();
        this.jtxpFuncion.setCaretPosition(sel.length() + 3);        // TODO add your handling code here:
    }//GEN-LAST:event_jbtnLogaritmoNaturalActionPerformed

    private void jbtnCosecanteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnCosecanteActionPerformed
        String sel = Select(false);// Obtiene una selección (sin paréntesis)
        this.jtxpFuncion.setText(sel.concat("Csc".concat(arregloParentecis(true)).concat(Select2())));
        this.jtxpFuncion.grabFocus();
        this.jtxpFuncion.setCaretPosition(sel.length() + 4);        // TODO add your handling code here:
    }//GEN-LAST:event_jbtnCosecanteActionPerformed

    private void jbtnSecanteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnSecanteActionPerformed
        String sel = Select(false);// Obtiene una selección (sin paréntesis)
        this.jtxpFuncion.setText(sel.concat("Sec".concat(arregloParentecis(true)).concat(Select2())));
        this.jtxpFuncion.grabFocus();
        this.jtxpFuncion.setCaretPosition(sel.length() + 4);        // TODO add your handling code here:
    }//GEN-LAST:event_jbtnSecanteActionPerformed

    private void jbtnCotangenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnCotangenteActionPerformed
        String sel = Select(false);// Obtiene una selección (sin paréntesis)
        this.jtxpFuncion.setText(sel.concat("Cot".concat(arregloParentecis(true)).concat(Select2())));
        this.jtxpFuncion.grabFocus();
        this.jtxpFuncion.setCaretPosition(sel.length() + 4);        // TODO add your handling code here:
    }//GEN-LAST:event_jbtnCotangenteActionPerformed

    private void jbtnTangenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnTangenteActionPerformed
        String sel = Select(false);// Obtiene una selección (sin paréntesis)
        this.jtxpFuncion.setText(sel.concat("Tan".concat(arregloParentecis(true)).concat(Select2())));
        this.jtxpFuncion.grabFocus();
        this.jtxpFuncion.setCaretPosition(sel.length() + 4);        // TODO add your handling code here:
    }//GEN-LAST:event_jbtnTangenteActionPerformed

    private void jbtnCosenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnCosenoActionPerformed
        String sel = Select(false);// Obtiene una selección (sin paréntesis)
        this.jtxpFuncion.setText(sel.concat("Cos".concat(arregloParentecis(true)).concat(Select2())));
        this.jtxpFuncion.grabFocus();
        this.jtxpFuncion.setCaretPosition(sel.length() + 4);        // TODO add your handling code here:
    }//GEN-LAST:event_jbtnCosenoActionPerformed

    private void jbtnSenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnSenoActionPerformed
        String sel = Select(false);// Obtiene una selección (sin paréntesis)
        this.jtxpFuncion.setText(sel.concat("Sen".concat(arregloParentecis(true)).concat(Select2())));
        this.jtxpFuncion.grabFocus();
        this.jtxpFuncion.setCaretPosition(sel.length() + 4);
    }//GEN-LAST:event_jbtnSenoActionPerformed

    private void jbtnDerivadaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnDerivadaActionPerformed
        LeerDiferencial(); //Llama a la funcion difrerencial 
        if (dato != null) { //verifica si el dato es "Nulo" 
            Border borde = new TitledBorder("Al Derivar resulta:");
           // Verifica si 'dato' no es una cadena vacía. 
            if (!"".equals(dato)) { // Verifica si 'dato' no es una cadena vacía. 
               
                // Concatena texto al JTextPane 'jtxpFuncion' para mostrar un mensaje relacionado con una derivada. 
                
               this.jtxpFuncion.setText(this.jtxpFuncion.getText().concat(" d".concat(" \n──".concat("()\nd".concat(String.valueOf(dato.charAt(0)))))));
                integrar = false; // Establece 'integrar' como falso
                this.jPanel5.setBorder(borde);
                this.jtxpFuncion.setEnabled(true);
                changeLineSpacing(Float.valueOf("-0.5"), false, this.jtxpFuncion);
                // Deshabilita los botones 'jbtnIntegrando' y 'jbtnDerivada' 
                this.jbtnIntegrando.setEnabled(false);
                this.jbtnDerivada.setEnabled(false);
                this.jtxpFuncion.grabFocus();
                this.jtxpFuncion.setCaretPosition(7);
                estado(true); // Cambia el estado a verdadero.
            }
        }
    }//GEN-LAST:event_jbtnDerivadaActionPerformed

    private void jbtnProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnProductoActionPerformed
        Parentesis(this.jtxpFuncion.getText(), false);
    }//GEN-LAST:event_jbtnProductoActionPerformed

    private void jbtnCosienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnCosienteActionPerformed
        Parentesis(this.jtxpFuncion.getText(), true);
    }//GEN-LAST:event_jbtnCosienteActionPerformed

    private void jbtnParentecisCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnParentecisCActionPerformed
        String sel = Select(true); // Obtiene una selección y guarda el resultado en la variable 'sel'.
        this.jtxpFuncion.setText(sel.concat(")".concat(Select2()))); // Concatena el resultado de 'Select2()' y cierra paréntesis, luego establece el texto en 'jtxpFuncion'.

        this.jtxpFuncion.grabFocus();
        this.jtxpFuncion.setCaretPosition(sel.length() + 1); // Establece la posición del cursor después de la selección hecha en 'sel'.
    }//GEN-LAST:event_jbtnParentecisCActionPerformed

    private void jbtnParentecisAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnParentecisAActionPerformed
        String sel = Select(true);
        // Concatena paréntesis y el resultado de 'Select2()', luego establece el texto en 'jtxpFuncion'.
        this.jtxpFuncion.setText(sel.concat("()".concat(Select2())));
        this.jtxpFuncion.grabFocus();
        // Establece la posición del cursor después de la selección hecha en 'sel'.
        this.jtxpFuncion.setCaretPosition(sel.length() + 1);
    }//GEN-LAST:event_jbtnParentecisAActionPerformed

    private void jbtnExponencialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnExponencialActionPerformed
        String sel = Select(true);
        // Concatena la letra 'e' y el resultado de 'Select2()', luego establece el texto en 'jtxpFuncion'.
        this.jtxpFuncion.setText(sel.concat("e".concat(Select2())));
        this.jtxpFuncion.grabFocus();
        // Establece la posición del cursor después de la selección hecha en 'sel'.
        this.jtxpFuncion.setCaretPosition(sel.length() + 1);
    }//GEN-LAST:event_jbtnExponencialActionPerformed

    private void jbtnPotenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnPotenciaActionPerformed
        String sel = Select(true);
        this.jtxpFuncion.setText(sel.concat("^".concat(Select2())));
        this.jtxpFuncion.grabFocus();
        this.jtxpFuncion.setCaretPosition(sel.length() + 1);
    }//GEN-LAST:event_jbtnPotenciaActionPerformed

    private void jbtnCuboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnCuboActionPerformed
        String sel = Select(true);
        this.jtxpFuncion.setText(sel.concat("^3".concat(Select2())));
        this.jtxpFuncion.grabFocus();
        this.jtxpFuncion.setCaretPosition(sel.length() + 2);
    }//GEN-LAST:event_jbtnCuboActionPerformed

    private void jbtnCuadradoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnCuadradoActionPerformed
        String sel = Select(true);
        this.jtxpFuncion.setText(sel.concat("^2".concat(Select2())));
        this.jtxpFuncion.grabFocus();
        this.jtxpFuncion.setCaretPosition(sel.length() + 2);
    }//GEN-LAST:event_jbtnCuadradoActionPerformed
//El proceso se repite hasta acá 
    private void jbtnIntegrandoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnIntegrandoActionPerformed
        LeerDiferencial(); // Lee la diferencial
        if (dato != null) { // Verifica si 'dato' no es nulo
            Border borde = new TitledBorder("Al integrar resulta:");
            String dat = String.valueOf(dato.charAt(0)); // Obtiene el primer caracter de 'dato' y lo convierte a String
            try { 
                // Compara el hashCode de 'dat' con 0
                if (dat.hashCode() >= 0) { // Si es mayor o igual a 0, establece el texto en 'jtxpFuncion'
                    this.jtxpFuncion.setText("∫()d".concat(String.valueOf(dato.charAt(0)).concat(" ")));
                    this.jPanel5.setBorder(borde);
                    integrar = true; // Establece 'integrar' como verdadero
                    this.jtxpFuncion.setEnabled(true);
                    this.jtxpFuncion.setCaretPosition(2);
                    this.jtxpFuncion.grabFocus();
                    // Deshabilita los botones 'jbtnDerivada' y 'jbtnIntegrando'
                    this.jbtnDerivada.setEnabled(false);
                    this.jbtnIntegrando.setEnabled(false);
                    estado(true); // Cambia el estado a verdadero
                    this.jbtnLogaritmoNatural.setEnabled(false); // Deshabilita el botón 'jbtnLogaritmoNatural'
                } else { // Si el hashCode no es mayor o igual a 0, no hace nada
                }
                 // Si se produce una excepción de tipo NullPointerException, muestra un mensaje de advertencia
            } catch (NullPointerException n) { 
                JOptionPane.showMessageDialog(this, "Debe ingresar una letra", "Advertencia", JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_jbtnIntegrandoActionPerformed

    private void jtxpFuncionKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxpFuncionKeyReleased

    }//GEN-LAST:event_jtxpFuncionKeyReleased

    private void jtxpFuncionKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxpFuncionKeyPressed
        // Inicialización de variables
        boolean Potencia = true; // Variable booleana 'Potencia' se inicializa como true
       jtxasetFont(this.jtxpFuncion); // Llamada a un método 'jtxasetFont' con 'this.jtxpFuncion' como argumento 
       
        int pos = 0; // Inicialización de variable 'pos' con valor 0
        char caracter = evt.getKeyChar(); // Obtiene el caracter del evento 'evt'
        // Verifica si el JTextPane 'jtxpFuncion' está vacío
        if (this.jtxpFuncion.getText().equals("")) {
            // Si está vacío, habilita los botones 'jbtnDerivada' y 'jbtnIntegrando'
            this.jbtnDerivada.setEnabled(true);
            this.jbtnIntegrando.setEnabled(true);
        }
        if (evt.getKeyCode() == 127 || evt.getKeyCode() == 8) {  // Verifica si se presionó la tecla de borrar o suprimir 
            if (!integrar) { // Verifica si no se está integrando 
                // Si la posición del cursor es 7, realiza una operación de edición de texto
                if (this.jtxpFuncion.getCaretPosition() == 7) {
                    this.jtxpFuncion.setText(this.jtxpFuncion.getText().substring(0, 7).concat(" ").concat(this.jtxpFuncion.getText().substring(this.jtxpFuncion.getCaretPosition(), this.jtxpFuncion.getText().length())));
                    this.jtxpFuncion.setCaretPosition(8);
                } 
                // Si la posición del cursor es la última aparición de ')', realiza una operación de edición de texto
                if (this.jtxpFuncion.getCaretPosition() == this.jtxpFuncion.getText().lastIndexOf(")")) { 
                    int p = this.jtxpFuncion.getCaretPosition(); // Guarda la posición actual del cursor
                     // Realiza una operación de edición de texto para añadir un espacio
                    this.jtxpFuncion.setText(this.jtxpFuncion.getText().substring(0, p).concat(" ").concat(this.jtxpFuncion.getText().substring(p, this.jtxpFuncion.getText().length())));
                    
                    // Restaura la posición del cursor
                    this.jtxpFuncion.setCaretPosition(p);
                }
            } else { // Si no se cumple la condición anterior
                if (this.jtxpFuncion.getCaretPosition() == 2) {
                    // Realiza una operación de edición de texto para añadir un espacio
                    this.jtxpFuncion.setText(this.jtxpFuncion.getText().substring(0, 2).concat(" ").concat(this.jtxpFuncion.getText().substring(this.jtxpFuncion.getCaretPosition(), this.jtxpFuncion.getText().length())));
                    this.jtxpFuncion.setCaretPosition(8); // Establece la posición del cursor a 8
                }
                // Comprueba si la posición del cursor es la última aparición de ')'
                if (this.jtxpFuncion.getCaretPosition() == this.jtxpFuncion.getText().lastIndexOf(")")) {
                    // Guarda la posición actual del cursor
                    int p = this.jtxpFuncion.getCaretPosition();
                    
                    // Realiza una operación de edición de texto para añadir un espacio
                    this.jtxpFuncion.setText(this.jtxpFuncion.getText().substring(0, p).concat(" ").concat(this.jtxpFuncion.getText().substring(p, this.jtxpFuncion.getText().length())));
                    
                    // Restaura la posición del cursor
                    this.jtxpFuncion.setCaretPosition(p);
                }
            }
        }
        if (Character.isLetter(caracter)) { // Comprueba si el caracter presionado es una letra
            // Convierte el caracter presionado a String y verifica si es diferente de 'dato'
            
            if (!String.valueOf(evt.getKeyChar()).equals(dato)) {
                // Pregunta al usuario si desea continuar
                if (JOptionPane.showConfirmDialog(this, "Debe ingresar la misma letra del diferencial \n ¿Deséas Continuar?", "Información", 1) == 1) {
                    int Position = this.jtxpFuncion.getCaretPosition(); // Guarda la posición actual del cursor
                    
                    // Realiza una operación de edición de texto para eliminar el caracter no válido
                    this.jtxpFuncion.setText(this.jtxpFuncion.getText().substring(0, Position - 1).concat(this.jtxpFuncion.getText().substring(Position, this.jtxpFuncion.getText().length())));
                    jtxasetFont(this.jtxpFuncion);
                    this.jtxpFuncion.grabFocus();
                    this.jtxpFuncion.setCaretPosition(Position - 1);
                    // Deshabilita botones
                    this.jbtnCuadrado.setEnabled(false);
                    this.jbtnCubo.setEnabled(false);
                    this.jbtnPotencia.setEnabled(false);
                }
            } else {
                this.jbtnCuadrado.setEnabled(true);
                this.jbtnCubo.setEnabled(true);
                this.jbtnPotencia.setEnabled(true);
            }
            // Bloque de código que se ejecuta si el caracter presionado no es una letra
        } else {
            // Deshabilita los botones 'jbtnCuadrado', 'jbtnCubo' y 'jbtnPotencia'
            this.jbtnCuadrado.setEnabled(false);
            this.jbtnCubo.setEnabled(false);
            this.jbtnPotencia.setEnabled(false);
        }
        // Verifica si el caracter presionado es el símbolo '^'
        if (evt.getKeyChar() == '^') {
            Potencia = true; // Si es '^', se activa la variable 'Potencia'
        } else if (evt.getKeyChar() == '+' || evt.getKeyChar() == '-' || evt.getKeyChar() == '(' 
                || ((evt.getKeyCode() >= 97 && evt.getKeyCode() <= 122) 
                || (evt.getKeyCode() >= 65 && evt.getKeyCode() <= 90))) {
            Potencia = false; // Si es uno de estos caracteres, se desactiva 'Potencia'
        } else if (Potencia) {
            System.out.println("no se acepta letra"); // Si 'Potencia' está activa, imprime un mensaje en la consola
        }
        if (Potencia) { // Si 'Potencia' está activa, imprime un mensaje en la consola
            System.out.println("hola");
        }

    }//GEN-LAST:event_jtxpFuncionKeyPressed

    private void jbtnComentarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnComentarioActionPerformed
        String Texto = ""; // Variable para almacenar el texto del comentario

        // Itera sobre el ArrayList 'CDI.Comentario' para realizar comparaciones
        for (int i = 0; i < CDI.Comentario.size(); i++) {
            for (int j = 1; j < CDI.Comentario.size(); j++) {
                // Compara elementos en posiciones diferentes del ArrayList y si son iguales, los marca con '$$$'
                if (CDI.Comentario.get(i).equals(CDI.Comentario.get(j)) && j != i) {
                    CDI.Comentario.set(j, "$$$");
                }
            }
        }
        for (Object Descripcion : CDI.Comentario) {
            // Si el elemento no es igual a '$$$', lo agrega al texto
            if (!"$$$".equals(Descripcion.toString())) {
                Texto = Texto.concat(Descripcion.toString()).concat("\n");
            }
        }
        // Muestra un cuadro de diálogo con el texto del comentario
        JOptionPane.showMessageDialog(this, "En esta función se aplicó lo siguiente: \n" + Texto, "Información", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jbtnComentarioActionPerformed

    private void jbtnHistorialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnHistorialActionPerformed
        int contador = 0;  // Inicialización de la variable 'contador' con valor 0
        
        Vector Datos = new Vector(); // Creación de un nuevo Vector llamado 'Datos'
        for (int i = 0; i < ModeloHistorial.getRowCount(); i++) { // Elimina todas las filas del ModeloHistorial
            ModeloHistorial.removeRow(i);
        }
        
        // Verifica si la última posición de 'Historial' no es nula
        if (Historial[9]!=null) {
            // Itera sobre el arreglo 'Historial'
            for (ArrayList Historial1 : Historial) { // Verifica si el elemento actual no es nulo
                if (Historial1 != null) {
                    // Añade elementos al Vector 'Datos'
                    Datos.add(Historial1.get(0).toString());
                    Datos.add(Historial1.get(4).toString());
                    // Agrega una fila al ModeloHistorial
                    ModeloHistorial.addRow(Datos);
                    contador++; // Incrementa el contador
                }
            }
            // Establece el ModeloHistorial en el componente 'jlitHistorial'
            this.jlitHistorial.setModel(ModeloHistorial);
            CentrarVentana(jdalHistorial);
        } else {
             // Muestra un mensaje de advertencia si no hay operaciones guardadas
            JOptionPane.showMessageDialog(this, "No hay operaciones guardadas.\nDebe de resolver al menos una (1)", "Información", JOptionPane.INFORMATION_MESSAGE);
        }

    }//GEN-LAST:event_jbtnHistorialActionPerformed

    private void jbtnMostrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnMostrarActionPerformed
        if (this.jlitHistorial.getSelectedRows().length!=0) { // Verifica si hay alguna fila seleccionada en 'jlitHistorial'
            // Obtiene el valor de la fila seleccionada en la columna 0
            String seleccion = this.jlitHistorial.getValueAt(0,this.jlitHistorial.getSelectedRow()).toString();
            System.out.println(seleccion); // Imprime el valor seleccionado en la consola
            ArrayList lista = new ArrayList(); // Crea un nuevo ArrayList llamado 'lista'
            for (int i = 9; i > 0; i--) { // Itera en reversa sobre 'Historial' (desde la posición 9 hasta 1)
                lista = Historial[i];
                // Compara el primer elemento de 'lista' con 'seleccion'
                if (lista.get(0) == seleccion) {
                    break; // Si son iguales, termina el bucle
                }
            }
            // Asigna valores a los JTextPane y otros componentes
            this.jtxpFuncion.setText(lista.get(0).toString());
            this.jtxpProcedimiento.setText(lista.get(2).toString());
            this.jtxpResultado.setText(lista.get(4).toString());
            this.jdalHistorial.setVisible(false); // Oculta la ventana 'jdalHistorial'
            CDI.Comentario.clear(); // Limpia el ArrayList 'CDI.Comentario'
            for (int i = 6; i < lista.size(); i++) { // Copia los elementos de 'lista' a 'CDI.Comentario' (desde la posición 6 hasta el final)
                CDI.Comentario.add(lista.get(i));
            }
            // Establece el estado de algunos botones y componentes
            estado(true);
            this.jbtnComentario.setEnabled(true);
            this.jbtnImprimir.setEnabled(true);
            this.jbtnIntegrando.setEnabled(false);
            this.jbtnDerivada.setEnabled(false);
        } else {
            // Muestra un mensaje de advertencia si no se ha seleccionado un ejercicio
            JOptionPane.showMessageDialog(this, "Debe seleccionar un ejercicio antes de mostrarlo.", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jbtnMostrarActionPerformed

    private void jbtnImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnImprimirActionPerformed
        FileWriter fichero; // Declaración de un objeto FileWriter
        String Nombre = ""; // Declaración de una cadena de texto llamada "Nombre"
        try {
            // Genera una cadena de texto aleatoria y la asigna a 'Nombre'
            Nombre = getSaltString();
            // Abre un archivo en la ruta especificada para escritura ('c:/Resultados/' + Nombre + ".doc")
            fichero = new FileWriter("c:/Resultados/" + Nombre + ".doc");
            fichero.write(this.jtxpFuncion.getText()); // Escribe el contenido del JTextPane 'jtxpFuncion' en el archivo
            fichero.write("\n");
            fichero.write(this.jtxpProcedimiento.getText()); // Escribe el contenido de 'jtxpProcedimiento' en el archivo
            fichero.write("\n");
            fichero.write("Resultado: ");
            fichero.write("\n");
            fichero.write(this.jtxpResultado.getText()); // Escribe la etiqueta "Resultado:" en el archivo
            fichero.write("\n"); // Escribe el contenido de 'jtxpResultado' en el archivo
            fichero.close();  // Cierra el FileWriter para liberar recursos

        } catch (Exception ex) {
            // Muestra un mensaje de error si no se pudo guardar el archivo
            JOptionPane.showMessageDialog(this, "No se pudo guardar el Archivo.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        try {
            Runtime obj = Runtime.getRuntime();
            //La instrucción es notepad para abrir el bloc de notas, espacio
            //y la ruta donde esta el archivo
            obj.exec("cmd /c start notepad " + "\"c:/Resultados/" + Nombre + ".doc\""); // Ejecuta el comando para abrir el Bloc de notas con el archivo recién creado
        } catch (IOException ex) {
             // Muestra un mensaje de error si el archivo no existe o no se puede abrir
            JOptionPane.showMessageDialog(this, "Este archivo no existe.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jbtnImprimirActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new RunnableImpl());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JButton jbtnComentario;
    private javax.swing.JButton jbtnCosecante;
    private javax.swing.JButton jbtnCoseno;
    private javax.swing.JButton jbtnCosiente;
    private javax.swing.JButton jbtnCotangente;
    private javax.swing.JButton jbtnCuadrado;
    private javax.swing.JButton jbtnCubo;
    private javax.swing.JButton jbtnDerivada;
    private javax.swing.JButton jbtnExponencial;
    private javax.swing.JButton jbtnHistorial;
    private javax.swing.JButton jbtnIgual;
    private javax.swing.JButton jbtnImprimir;
    private javax.swing.JButton jbtnIntegrando;
    private javax.swing.JButton jbtnLogaritmoNatural;
    private javax.swing.JButton jbtnMostrar;
    private javax.swing.JButton jbtnNuevo;
    private javax.swing.JButton jbtnParentecisA;
    private javax.swing.JButton jbtnParentecisC;
    private javax.swing.JButton jbtnPotencia;
    private javax.swing.JButton jbtnProducto;
    private javax.swing.JButton jbtnSecante;
    private javax.swing.JButton jbtnSeno;
    private javax.swing.JButton jbtnTangente;
    private javax.swing.JButton jbtnValorAbsoluto;
    private javax.swing.JDialog jdalHistorial;
    private javax.swing.JTable jlitHistorial;
    private javax.swing.JTextPane jtxpFuncion;
    private javax.swing.JTextPane jtxpProcedimiento;
    private javax.swing.JTextPane jtxpResultado;
    // End of variables declaration//GEN-END:variables

    private String Select(boolean tipo) {
        if (tipo) { // Si 'tipo' es true, devuelve la subcadena hasta la posición del cursor en 'jtxpFuncion'.
            return this.jtxpFuncion.getText().substring(0, this.jtxpFuncion.getCaretPosition());
        } else {
            // Si 'tipo' es false, devuelve la subcadena hasta el primer paréntesis en 'jtxpFuncion'.
            return this.jtxpFuncion.getText().substring(0, this.jtxpFuncion.getText().indexOf("(") + 1);
        }
    }

    private String Select2() {
        return this.jtxpFuncion.getText().substring(this.jtxpFuncion.getCaretPosition(), this.jtxpFuncion.getText().length());
    }

    public String getSaltString() {
        String SALTCHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";
        StringBuilder salt = new StringBuilder();
        Random rnd = new Random();
        while (salt.length() < 18) { // Longitud de la cadena aleatoria.
            int index = (int) (rnd.nextFloat() * SALTCHARS.length());
            salt.append(SALTCHARS.charAt(index));
        }
        String saltStr = salt.toString();
        return saltStr;
    }

    private void changeLineSpacing(float factor, boolean replace, JTextPane jtxpvariable) {
        jtxpvariable.selectAll(); // Selecciona todo el texto en el JTextPane.
        // Obtiene el conjunto de atributos del párrafo actual.
        MutableAttributeSet set = new SimpleAttributeSet(jtxpvariable.getParagraphAttributes());
        StyleConstants.setLineSpacing(set, factor); // Establece el espaciado entre líneas.
        jtxpvariable.setParagraphAttributes(set, replace); // Aplica los nuevos atributos de párrafo.
        jtxasetFont(jtxpvariable); // Aplica la configuración de fuente.
    }

    //Prentesis Si es true, la cadena estará encerrada entre paréntesis. Si es false, estará encerrada entre barras verticales.
    //Una cadena que encierra el contenido entre paréntesis o barras verticales.
    private void jtxasetFont(JTextPane jtxpvariable) {
        Font fuente = new Font("Times New Roman", Font.ITALIC, 18);
        jtxpvariable.setFont(fuente);
    }

    public String arregloParentecis(boolean Prentesis) {
        String cadena;
        if (Prentesis) {
            cadena = "(".concat(this.jtxpFuncion.getText().substring(this.jtxpFuncion.getText().indexOf("(") + 1, this.jtxpFuncion.getText().lastIndexOf(")"))).concat(")");
            return cadena;
        } else {
            cadena = "|".concat(this.jtxpFuncion.getText().substring(this.jtxpFuncion.getText().indexOf("(") + 1, this.jtxpFuncion.getText().lastIndexOf(")"))).concat("|");
            return cadena;
        }
    }

    //Este método estado se encarga de habilitar 
    //o deshabilitar varios botones en la interfaz gráfica. 
    //Si b es true, habilita los botones; si es false, los deshabilita.
    private void estado(boolean b) {
        this.jbtnCosecante.setEnabled(b);
        this.jbtnCoseno.setEnabled(b);
        this.jbtnCosiente.setEnabled(b);
        this.jbtnCotangente.setEnabled(b);
        this.jbtnCuadrado.setEnabled(b);
        this.jbtnCubo.setEnabled(b);
        this.jbtnExponencial.setEnabled(b);
        this.jbtnIgual.setEnabled(b);
        this.jbtnLogaritmoNatural.setEnabled(b);
        this.jbtnNuevo.setEnabled(b);
        this.jbtnParentecisA.setEnabled(b);
        this.jbtnParentecisC.setEnabled(b);
        this.jbtnPotencia.setEnabled(b);
        this.jbtnProducto.setEnabled(b);
        this.jbtnSecante.setEnabled(b);
        this.jbtnSeno.setEnabled(b);
        this.jbtnTangente.setEnabled(b);
        this.jbtnValorAbsoluto.setEnabled(b);
    }

    //Función para agregar paréntesis en la expresión.
    private void Parentesis(String texto, boolean Cosiente) {
        String sel = Select(true);  // Obtiene el texto seleccionado en el JTextPane
        String sel2 = Select2(); // Obtiene el texto después de la selección
        boolean bol = true;
        boolean parentesis = false;// Variable para verificar si hay paréntesis en el texto seleccionado
        
        // Verifica si hay paréntesis en el texto seleccionado
        for (int i = 0; i < sel.length(); i++) {
            parentesis = sel.charAt(i) == '(';
        }
        if (parentesis) {
            if (!Cosiente) {
                 // Agrega paréntesis al final del texto seleccionado y concatena con sel2
                this.jtxpFuncion.setText(sel.concat("()()").concat(sel2));
            } else {
                // Agrega paréntesis y barra inclinada al final del texto seleccionado y concatena con sel2
                this.jtxpFuncion.setText(sel.concat("()/()").concat(sel2));
            }
            this.jtxpFuncion.grabFocus();
            this.jtxpFuncion.setCaretPosition(sel.length() + 1);
        } else {
            if (!Cosiente) {
                // Agrega un paréntesis antes del texto seleccionado y después del cursor,
            // luego agrega dos conjuntos de paréntesis vacíos y finalmente concatena con sel2
                this.jtxpFuncion.setText(this.jtxpFuncion.getText().substring(0, this.jtxpFuncion.getText().indexOf("(")).concat("(").concat(this.jtxpFuncion.getText().substring(this.jtxpFuncion.getText().indexOf("("), this.jtxpFuncion.getCaretPosition())).concat(")").concat("()").concat(sel2));
                this.jtxpFuncion.grabFocus();
                this.jtxpFuncion.setCaretPosition(sel.length() + 3);
            } else {
                // Agrega un paréntesis antes del texto seleccionado y después del cursor,
            // luego agrega una barra inclinada y dos conjuntos de paréntesis vacíos y finalmente concatena con sel2
                this.jtxpFuncion.setText(this.jtxpFuncion.getText().substring(0, this.jtxpFuncion.getText().indexOf("(")).concat("(").concat(this.jtxpFuncion.getText().substring(this.jtxpFuncion.getText().indexOf("("), this.jtxpFuncion.getCaretPosition())).concat(")").concat("/()").concat(sel2));
                this.jtxpFuncion.grabFocus();
                this.jtxpFuncion.setCaretPosition(sel.length() + 4);
            }
        }
    }

    private void LeerDiferencial() {
        int Diferencial = 0; // Variable para verificar si se proporciona un diferencial válido
        do {
            // Solicita al usuario que ingrese un diferencial
            dato = JOptionPane.showInputDialog(this, "Introduce el Diferencial (una letra)", "Diferencial: ", 2);
            if (dato != null) {
                // Comprueba si el primer carácter ingresado es una letra mayúscula (código ASCII)
                if (dato.substring(0, 1).toUpperCase().hashCode() > 90 || dato.substring(0, 1).toUpperCase().hashCode() < 65) {
                    // Muestra un mensaje de error si no es una letra mayúscula
                    JOptionPane.showMessageDialog(this, "Para poder admitirse como diferencial es necesario que sea una letra. \n Revise su función e intente de nuevo.", "Error", JOptionPane.ERROR_MESSAGE);
                    Diferencial = 0; // Restablece Diferencial a 0 para volver a solicitar
                } else {
                    Diferencial = 1; // Establecer Diferencial en 1 para salir del bucle
                }
            }
        } while (Diferencial != 1); // Establecer Diferencial en 1 para salir del bucle
    }

    private void GuardarHistorial() {
        ArrayList his = new ArrayList();// Crea un ArrayList para almacenar la información del historia
        // Agrega el texto de la función al ArrayList
        his.add(this.jtxpFuncion.getText());
        his.add("&&&");// Agrega un marcador (&&&) para separar la función del procedimiento
        // Agrega el texto del procedimiento al ArrayList
        his.add(this.jtxpProcedimiento.getText());
        his.add("$$$");
        his.add(this.jtxpResultado.getText());
        his.add("%%%");// Agrega un marcador (%%%) para separar el resultado de los comentarios
        // Agrega los comentarios al ArrayList utilizando un stream
        CDI.Comentario.stream().forEach((Comentario) -> {
            his.add(Comentario);
        });
        Historial[cont] = his;// Almacena el ArrayList en la posición actual del historial
        if (cont == 0) {
            Historial[9].clear(); // Si la posición actual es 0, borra la última entrada del historial
            for (int i = 9; i > 0; i--) {
                Historial[i - 1] = Historial[i]; // Mueve las entradas del historial hacia arriba
            }
        } else {
            cont--; // Si la posición actual no es 0, decrementa el contador
        }
    }

    public void CentrarVentana(JDialog dialogos) {
        dialogos.setSize(520, 320); // Establece el tamaño del diálogo
       
        // Obtiene el tamaño de la pantalla y del diálogo
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension frameSize = dialogos.getSize(), dm = new Dimension();

        if (frameSize.height > screenSize.height) {
            frameSize.height = screenSize.height; // Ajusta la altura si es mayor que la pantalla
        }

        if (frameSize.width > screenSize.width) {
            frameSize.width = screenSize.width; // Ajusta el ancho si es mayor que la pantalla
        }
        dm = dialogos.getSize(); // Obtiene el tamaño actual del diálogo
        dialogos.setVisible(true); // Hace visible el diálogo
        dialogos.setLocation((screenSize.width - frameSize.width) / 2, // Centra el diálogo en la pantalla
                (screenSize.height - frameSize.height) / 2);
    }
// Clase interna que implementa la interfaz Runnable
    private static class RunnableImpl implements Runnable {

        public RunnableImpl() {
        }

        @Override
        public void run() {
            new GUI().setVisible(true);  // Crea una nueva instancia de GUI y la hace visible
        }
    }

}
